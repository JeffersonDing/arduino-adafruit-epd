#include <stdint.h>
#include <stdio.h>

#include "Adafruit_EPD.h"
#include "mgos_aepd.h"
#include "mgos_app.h"

static const uint8_t mgos_logo[] = {
	0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xc0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x00,
	0x00, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00,
	0x1f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x7f, 0xff,
	0xff, 0xff, 0x80, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff,
	0xe0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x07, 0xff, 0x9f, 0xfc, 0x7f, 0xf8, 0x00,
	0x0f, 0xff, 0x07, 0xf8, 0x3f, 0xfc, 0x00, 0x1f, 0xfe, 0x77, 0xfb, 0x9f, 0xfe, 0x00, 0x3f, 0xfe,
	0x73, 0xf3, 0x9f, 0xff, 0x00, 0x3f, 0xfe, 0x67, 0xf1, 0x9f, 0xff, 0x00, 0x7f, 0xfc, 0x07, 0xe0,
	0x3f, 0xff, 0x80, 0x7f, 0xf8, 0x1f, 0xc0, 0xff, 0xff, 0x80, 0xff, 0xf0, 0x7e, 0x03, 0xf0, 0xff,
	0xc0, 0xff, 0xe0, 0xfc, 0x07, 0xe2, 0x7f, 0xc0, 0xff, 0xc1, 0xfc, 0xcf, 0xe7, 0x7f, 0xc0, 0xff,
	0x83, 0xfc, 0xcf, 0xe7, 0x7f, 0xc0, 0xff, 0x07, 0xfc, 0x0f, 0xf0, 0x3f, 0xc0, 0xfe, 0x0f, 0xfe,
	0x1f, 0xf0, 0x1f, 0xc0, 0x7c, 0x1f, 0xff, 0xff, 0xff, 0x0f, 0x80, 0x78, 0x3f, 0xff, 0xff, 0xff,
	0x87, 0x80, 0x30, 0x7f, 0xff, 0xff, 0xff, 0xc3, 0x00, 0x20, 0xff, 0xff, 0xff, 0xff, 0xe1, 0x00,
	0x01, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x07, 0xff,
	0xff, 0xff, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff,
	0xff, 0xe0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x80,
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
	0x0f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xff,
	0xff, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0,
	0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00
};

static void draw(void) {
  Adafruit_EPD *epd = mgos_aepd_get_global();

  epd->clearBuffer();
  epd->setTextWrap(true);
  epd->setTextColor(0);

  int imgDim = 50;
  epd->drawBitmap(0, 0, mgos_logo, imgDim, imgDim, 0);

  epd->setCursor(0, imgDim + 2);

  epd->setTextSize(2);
  epd->print("Hello World!");

  int currX = epd->getCursorX();
  epd->println("");
  int currY = epd->getCursorY();

  const int gfxPrimDim = 20;
  const int gfxPrimOffset = 5;

  epd->drawLine(0, currY, currX, currY, 0);
  currX = 0;
  currY = currY + gfxPrimOffset;

  epd->drawRect(0, currY, gfxPrimDim, gfxPrimDim, 0);
  currX = gfxPrimDim + gfxPrimOffset;

  epd->fillRect(currX, currY, gfxPrimDim, gfxPrimDim, 0);
  currX = currX + gfxPrimDim + gfxPrimOffset;

  epd->drawCircle(currX + gfxPrimDim / 2, currY + gfxPrimDim / 2, gfxPrimDim / 2, 0);
  currX = currX + gfxPrimDim + gfxPrimOffset;

  epd->fillCircle(currX + gfxPrimDim / 2, currY + gfxPrimDim / 2, gfxPrimDim / 2, 0);
  currX = currX + gfxPrimDim + gfxPrimOffset;

  epd->drawTriangle(currX, currY + gfxPrimDim, currX + gfxPrimDim / 2, currY, currX + gfxPrimDim, currY + gfxPrimDim, 0);
  currX = currX + gfxPrimDim + gfxPrimOffset;

  epd->fillTriangle(currX, currY + gfxPrimDim, currX + gfxPrimDim / 2, currY, currX + gfxPrimDim, currY + gfxPrimDim, 0);
  currX = currX + gfxPrimDim + gfxPrimOffset;

  epd->drawRoundRect(currX, currY, gfxPrimDim, gfxPrimDim, 5, 0);
  currX = currX + gfxPrimDim + gfxPrimOffset;

  epd->fillRoundRect(currX, currY, gfxPrimDim, gfxPrimDim, 5, 0);
  currX = currX + gfxPrimDim + gfxPrimOffset;

  currX = 0;
  currY = currY + gfxPrimDim + gfxPrimOffset;

  char *header = "Made with <3 in Berlin";
  epd->setTextSize(1);

  int16_t ftb_x;
  int16_t ftb_y;
  uint16_t ftb_w;
  uint16_t ftb_h;

  epd->getTextBounds(header, 0, 0, &ftb_x, &ftb_y, &ftb_w, &ftb_h);
  epd->setCursor(epd->width() - ftb_w, epd->height() - ftb_h);
  epd->print(header);

  epd->display();
}

enum mgos_app_init_result mgos_app_init(void) {
  draw();
  return MGOS_APP_INIT_SUCCESS;
}
